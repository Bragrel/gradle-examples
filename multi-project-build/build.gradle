buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:+"
    }
}


plugins {
    id 'net.researchgate.release' version '2.7.0'
}
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

task build {}

task buildCore(type: GradleBuild) {
    dir = "core"
    tasks = ["build"]
}

task buildApp(type: GradleBuild) {
    dir = "app"
    tasks = ["build"]
}

release {
    tagTemplate = '${version}'
    failOnUnversionedFiles = false
    failOnSnapshotDependencies = false
    git {
        requireBranch = 'master'
    }
}

artifactoryPublish.skip = true

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'idea'
    configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
        apply plugin: 'java'
    }
    group = 'net.petrikainulainen.gradle'
    status = 'Integration'
    repositories {
        maven {
            url "${artifactory_contextUrl}" // The Artifactory (preferably virtual) repository to resolve from
            credentials {
                username "${artifactory_user}"
                password "${artifactory_password}"
            }
        }
    }
}

subprojects {
    apply plugin: 'maven'

    if (project.plugins.hasPlugin('java')) {
        //manifest.mainAttributes(provider: 'gradle')
        manifest {
            attributes 'provider': 'gradle'
        }
        configurations {
            published
        }
        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        artifactoryPublish {
            dependsOn sourceJar
        }
        artifacts {
            published sourceJar
        }
    }
}

configurations {
    published
}

ext.set("artifactoryRepoKey", 'libs-snapshot-local')

task setReleaseRepo {
    doLast {
        artifactoryRepoKey = 'libs-release-local'
    }
}

task artifactoryPublishWorkaround(type: GradleBuild) {
    dir = "."
    tasks = ["beforeRelease", "artifactoryPublish"]

}

build.dependsOn(buildCore)
build.dependsOn(buildApp)
afterReleaseBuild.dependsOn(artifactoryPublishWorkaround)



task beforeRelease {
    doLast {
        artifactoryRepoKey = 'libs-release-local'
    }
}


release {
    buildTasks = ['build']
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = "${artifactoryRepoKey}" // The Artifactory repository key to publish to
            username = "${artifactory_user}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
        }
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishArtifacts = true
//            publications('mavenJava')
            publishConfigs('archives', 'published')
            // Properties to be attached to the published artifacts.
//            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // You can also attach properties to published artifacts according to
            // the following notation:
            // <configuration name> <artifact spec>
            // The <configuration name> should be the name of the relevant Gradle Configuration or 'all'
            // (for all configurations).
            // Artifact spec has the following structure:
            // group:artifact:version:classifier@ext
            // Any element in the artifact spec notation can contain the * and ? wildcards.
            // For example:
            // org.acme:*:1.0.?_*:*@tgz
//            properties {
//                all '*:*:1.*:*@*', key1: 'val1', key2: 'val2'
//                all 'org.jfrog.*:*:1.*:*@jar*', key3: 'val3', key4: 'val4'
//            }
            publishPom = true // Publish generated POM files to Artifactory (true by default)
            publishIvy = false
        }
    }
}
